diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java.new	2021-01-22 09:33:10.670949415 +0900
@@ -174,7 +174,7 @@
     AtomicBoolean mTestingEmergencyCall = new AtomicBoolean(false);
 
     final Integer mPhoneId;
-    private List<String> mOldRilFeatures;
+//    private List<String> mOldRilFeatures;
     private boolean mUseOldMncMccFormat;
 
     /* default work source which will blame phone process */
@@ -458,8 +458,8 @@
         mPhoneType = RILConstants.NO_PHONE;
         mPhoneId = instanceId;
 
-        final String oldRilFeatures = SystemProperties.get("ro.telephony.ril.config", "");
-        mOldRilFeatures = Arrays.asList(oldRilFeatures.split(","));
+//        final String oldRilFeatures = SystemProperties.get("ro.telephony.ril.config", "");
+//        mOldRilFeatures = Arrays.asList(oldRilFeatures.split(","));
 
         mUseOldMncMccFormat = SystemProperties.getBoolean(
                 "ro.telephony.use_old_mnc_mcc_format", false);
@@ -5591,9 +5591,14 @@
                 signalStrength.wcdma.rscp);
     }
 
-    public boolean needsOldRilFeature(String feature) {
-        return mOldRilFeatures.contains(feature);
-    }
+//    public boolean needsOldRilFeature(String feature) {
+//        return mOldRilFeatures.contains(feature);
+//    }
+       public static boolean needsOldRilFeature(String feature) {
+          List<String> oldRilFeatures = Arrays.asList(SystemProperties.get("ro.telephony.ril.config", "").split(","));
+          return oldRilFeatures.contains(feature);
+      }
+
 
     /* {CRAP}
     * @hide
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/ServiceStateTracker.java frameworks/opt/telephony/src/java/com/android/internal/telephony/ServiceStateTracker.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/ServiceStateTracker.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/ServiceStateTracker.java.new	2021-01-22 09:29:31.982949415 +0900
@@ -2342,10 +2342,12 @@
                                 && !mIsSimReady;
                 if (mEmergencyOnly && !forceDisplayNoService) {
                     // No service but emergency call allowed
+		    SystemProperties.set("gsm.status", "0");
                     plmn = Resources.getSystem().
                             getText(com.android.internal.R.string.emergency_calls_only).toString();
                 } else {
                     // No service at all
+		    SystemProperties.set("gsm.status", "1");
                     plmn = Resources.getSystem().
                             getText(com.android.internal.R.string.lockscreen_carrier_default).toString();
                     noService = true;
@@ -2354,12 +2356,14 @@
                         "of service, set plmn='" + plmn + "'");
             } else if (combinedRegState == ServiceState.STATE_IN_SERVICE) {
                 // In either home or roaming service
+		SystemProperties.set("gsm.status", "2");
                 plmn = mSS.getOperatorAlpha();
                 showPlmn = !TextUtils.isEmpty(plmn) &&
                         ((rule & SIMRecords.SPN_RULE_SHOW_PLMN)
                                 == SIMRecords.SPN_RULE_SHOW_PLMN);
             } else {
                 // Power off state, such as airplane mode, show plmn as "No service"
+		SystemProperties.set("gsm.status", "3");
                 showPlmn = true;
                 plmn = Resources.getSystem().
                         getText(com.android.internal.R.string.lockscreen_carrier_default).toString();
@@ -2412,6 +2416,7 @@
                     || !TextUtils.equals(spn, mCurSpn)
                     || !TextUtils.equals(dataSpn, mCurDataSpn)
                     || !TextUtils.equals(plmn, mCurPlmn)) {
+		SystemProperties.set("gsm.plmn", plmn);
                 if (DBG) {
                     log(String.format("updateSpnDisplay: changed sending intent rule=" + rule +
                             " showPlmn='%b' plmn='%s' showSpn='%b' spn='%s' dataSpn='%s' " +
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionController.java.new	2021-01-22 09:30:29.230949415 +0900
@@ -30,6 +30,7 @@
 import android.os.Binder;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.os.UserHandle;
 import android.provider.Settings;
 import android.telephony.RadioAccessFamily;
@@ -1417,6 +1418,7 @@
 
     @Override
     public int getSlotIndex(int subId) {
+	SystemProperties.set("gsm.subid", String.valueOf(subId));
         if (VDBG) printStackTrace("[getSlotIndex] subId=" + subId);
 
         if (subId == SubscriptionManager.DEFAULT_SUBSCRIPTION_ID) {
@@ -1424,6 +1426,7 @@
         }
         if (!SubscriptionManager.isValidSubscriptionId(subId)) {
             if (DBG) logd("[getSlotIndex]- subId invalid");
+	    SystemProperties.set("gsm.radioreset", "true");	
             return SubscriptionManager.INVALID_SIM_SLOT_INDEX;
         }
 
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java.new	2021-01-22 09:39:16.066949415 +0900
@@ -33,6 +33,7 @@
 import android.os.Message;
 import android.os.RemoteException;
 import android.os.ServiceManager;
+import android.os.SystemProperties;
 import android.preference.PreferenceManager;
 import android.provider.Settings;
 import android.provider.Settings.Global;
@@ -53,6 +54,9 @@
 import com.android.internal.telephony.euicc.EuiccController;
 import com.android.internal.telephony.uicc.IccRecords;
 import com.android.internal.telephony.uicc.IccUtils;
+import com.android.internal.telephony.RIL;
+
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -80,6 +84,10 @@
     private static final int EVENT_REFRESH_EMBEDDED_SUBSCRIPTIONS = 12;
 
     private static final String ICCID_STRING_FOR_NO_SIM = "";
+
+    // Fake ICCID
+    private static final String FAKE_ICCID = "00000000000001";
+
     /**
      *  int[] sInsertSimState maintains all slots' SIM inserted status currently,
      *  it may contain 4 kinds of values:
@@ -483,29 +491,46 @@
         if (mIccId[slotId] != null && !mIccId[slotId].equals(ICCID_STRING_FOR_NO_SIM)) {
             logd("SIM" + (slotId + 1) + " hot plug out or error.");
         }
-        mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+
+        if (!RIL.needsOldRilFeature("fakeiccid"))
+            mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+        else
+            mIccId[slotId] = FAKE_ICCID;
+
         if (isAllIccIdQueryDone()) {
             updateSubscriptionInfoByIccId();
         }
-        updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT);
-        broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null);
-        broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_ABSENT);
-        broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY);
+
+        if (!RIL.needsOldRilFeature("fakeiccid")) {
+            updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT);
+            broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT, null);
+            broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_ABSENT);
+            broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY);
+        }
+
     }
 
     protected void handleSimError(int slotId) {
         if (mIccId[slotId] != null && !mIccId[slotId].equals(ICCID_STRING_FOR_NO_SIM)) {
             logd("SIM" + (slotId + 1) + " Error ");
         }
-        mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+	
+        if (!RIL.needsOldRilFeature("fakeiccid"))
+               mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+        else
+               mIccId[slotId] = FAKE_ICCID;
+
         if (isAllIccIdQueryDone()) {
             updateSubscriptionInfoByIccId();
         }
-        updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
-        broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR,
-                IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
-        broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_CARD_IO_ERROR);
-        broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY);
+
+        if (!RIL.needsOldRilFeature("fakeiccid")) {
+            updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
+            broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR,
+                    IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
+            broadcastSimCardStateChanged(slotId, TelephonyManager.SIM_STATE_CARD_IO_ERROR);
+            broadcastSimApplicationStateChanged(slotId, TelephonyManager.SIM_STATE_NOT_READY);
+        }
     }
 
     /**
@@ -582,7 +607,11 @@
                     // no SIM inserted last time, but there is one SIM inserted now
                     mInsertSimState[i] = SIM_CHANGED;
                 }
-                oldIccId[i] = ICCID_STRING_FOR_NO_SIM;
+                if (!RIL.needsOldRilFeature("fakeiccid"))
+                    oldIccId[i] = ICCID_STRING_FOR_NO_SIM;
+                else
+                    oldIccId[i] = FAKE_ICCID;
+
                 logd("updateSubscriptionInfoByIccId: No SIM in slot " + i + " last time");
             }
         }
@@ -825,6 +854,7 @@
         SubscriptionManager.putPhoneIdAndSubIdExtra(i, slotId);
         logd("Broadcasting intent ACTION_SIM_STATE_CHANGED " + state + " reason " + reason +
              " for mCardIndex: " + slotId);
+	SystemProperties.set("gsm.sim_state", state);
         IntentBroadcaster.getInstance().broadcastStickyIntent(i, slotId);
     }
 
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java.new	2021-01-22 09:39:42.246949415 +0900
@@ -106,4 +106,7 @@
 
     //UICC access
     static final String DF_ADF = "7FFF";
+
+    // Fake ICCID
+    static final String FAKE_ICCID = "00000000000001";
 }
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java.new	2021-01-22 09:42:36.742949415 +0900
@@ -33,11 +33,15 @@
 import com.android.internal.telephony.CommandsInterface;
 import com.android.internal.telephony.GsmAlphabet;
 import com.android.internal.telephony.MccTable;
+import com.android.internal.telephony.RIL;
 import com.android.internal.telephony.SubscriptionController;
 import com.android.internal.telephony.cdma.sms.UserData;
 import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
 import com.android.internal.util.BitwiseInputStream;
 
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
+
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -676,13 +680,17 @@
                 ar = (AsyncResult)msg.obj;
                 data = (byte[])ar.result;
 
-                if (ar.exception != null) {
-                    break;
+                if (!RIL.needsOldRilFeature("fakeiccid")) {
+                    if (ar.exception != null) {
+                        break;
+                    }
+                    mIccId = IccUtils.bcdToString(data, 0, data.length);
+                    mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                } else {
+                    mIccId = FAKE_ICCID;
+                    mFullIccId = FAKE_ICCID;
                 }
 
-                mIccId = IccUtils.bcdToString(data, 0, data.length);
-                mFullIccId = IccUtils.bchToString(data, 0, data.length);
-
                 log("iccid: " + SubscriptionInfo.givePrintableIccid(mFullIccId));
 
             break;
diff -u -r frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java.new
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java	2021-01-22 08:10:04.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java.new	2021-01-22 09:44:24.086949415 +0900
@@ -31,11 +31,14 @@
 
 import com.android.internal.telephony.CommandsInterface;
 import com.android.internal.telephony.MccTable;
+import com.android.internal.telephony.RIL;
 import com.android.internal.telephony.SmsConstants;
 import com.android.internal.telephony.SubscriptionController;
 import com.android.internal.telephony.gsm.SimTlv;
 import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
 
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -892,12 +895,17 @@
                     ar = (AsyncResult) msg.obj;
                     data = (byte[]) ar.result;
 
-                    if (ar.exception != null) {
-                        break;
-                    }
+                    if (!RIL.needsOldRilFeature("fakeiccid")) {
+                        if (ar.exception != null) {
+                            break;
+                        }
 
-                    mIccId = IccUtils.bcdToString(data, 0, data.length);
-                    mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                        mIccId = IccUtils.bcdToString(data, 0, data.length);
+                        mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                    } else {
+                        mIccId = FAKE_ICCID;
+                        mFullIccId = FAKE_ICCID;
+                    }
 
                     log("iccid: " + SubscriptionInfo.givePrintableIccid(mFullIccId));
                     break;
