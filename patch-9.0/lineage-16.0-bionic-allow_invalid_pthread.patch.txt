diff --git a/libc/Android.bp b/libc/Android.bp
index eeeadb672..e5c4e7c32 100644
--- a/libc/Android.bp
+++ b/libc/Android.bp
@@ -1539,8 +1539,8 @@ cc_library_static {
         "stdlib/atexit.c",
         "bionic/fork.cpp",
     ],
+    cppflags: ["-Wold-style-cast", "-DALLOWS_INVALID_PTHREAD"],
 
-    cppflags: ["-Wold-style-cast"],
     include_dirs: ["bionic/libstdc++/include"],
     name: "libc_pthread",
 }
diff --git a/libc/bionic/pthread_internal.cpp b/libc/bionic/pthread_internal.cpp
index 829194cc7..0e4b61548 100644
--- a/libc/bionic/pthread_internal.cpp
+++ b/libc/bionic/pthread_internal.cpp
@@ -115,6 +115,9 @@ pthread_internal_t* __pthread_internal_find(pthread_t thread_id) {
 
   // Historically we'd return null, but
   if (bionic_get_application_target_sdk_version() >= __ANDROID_API_O__) {
+#ifdef ALLOWS_INVALID_PTHREAD
+    async_safe_format_log(ANDROID_LOG_WARN, "libc", "invalid pthread_t %p passed to libc", thread);
+#else
     if (thread == nullptr) {
       // This seems to be a common mistake, and it's relatively harmless because
       // there will never be a valid thread at address 0, whereas other invalid
@@ -125,6 +128,7 @@ pthread_internal_t* __pthread_internal_find(pthread_t thread_id) {
     } else {
       async_safe_fatal("invalid pthread_t %p passed to libc", thread);
     }
+#endif
   }
   return nullptr;
 }
