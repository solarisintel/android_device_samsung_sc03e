diff -u -r frameworks/native/libs/binder/Android.bp native/libs/binder/Android.bp
--- frameworks/native/libs/binder/Android.bp	2020-02-03 11:09:30.221905000 +0900
+++ frameworks/native/libs/binder/Android.bp.new	2020-02-03 15:42:47.041905000 +0900
@@ -105,6 +105,7 @@
         "-Wall",
         "-Wextra",
         "-Werror",
+       "-DDISABLE_ASHMEM_TRACKING"
     ],
     product_variables: {
         binder32bit: {
diff -u -r frameworks/native/libs/binder/Parcel.cpp native/libs/binder/Parcel.cpp
--- frameworks/native/libs/binder/Parcel.cpp	2020-02-03 11:09:30.229905000 +0900
+++ frameworks/native/libs/binder/Parcel.cpp.new	2020-02-03 15:46:41.609905000 +0900
@@ -542,7 +542,11 @@
 
             flat_binder_object* flat
                 = reinterpret_cast<flat_binder_object*>(mData + off);
+#ifndef DISABLE_ASHMEM_TRACKING
             acquire_object(proc, *flat, this, &mOpenAshmemSize);
+#else
+            acquire_object(proc, *flat, this);
+#endif
 
             if (flat->hdr.type == BINDER_TYPE_FD) {
                 // If this is a file descriptor, we need to dup it so the
@@ -1322,7 +1326,11 @@
         // Need to write meta-data?
         if (nullMetaData || val.binder != 0) {
             mObjects[mObjectsSize] = mDataPos;
+#ifndef DISABLE_ASHMEM_TRACKING
             acquire_object(ProcessState::self(), val, this, &mOpenAshmemSize);
+#else
+            acquire_object(ProcessState::self(), val, this);
+#endif
             mObjectsSize++;
         }
 
@@ -2514,7 +2522,11 @@
         i--;
         const flat_binder_object* flat
             = reinterpret_cast<flat_binder_object*>(data+objects[i]);
+#ifndef DISABLE_ASHMEM_TRACKING
         acquire_object(proc, *flat, this, &mOpenAshmemSize);
+#else
+        acquire_object(proc, *flat, this);
+#endif
     }
 }
 
@@ -2800,8 +2812,9 @@
     mFdsKnown = true;
     mAllowFds = true;
     mOwner = NULL;
+#ifndef DISABLE_ASHMEM_TRACKING
     mOpenAshmemSize = 0;
-
+#endif
     // racing multiple init leads only to multiple identical write
     if (gMaxFds == 0) {
         struct rlimit result;
@@ -2835,12 +2848,19 @@
     // This used to return the size of all blobs that were written to ashmem, now we're returning
     // the ashmem currently referenced by this Parcel, which should be equivalent.
     // TODO: Remove method once ABI can be changed.
+#ifndef DISABLE_ASHMEM_TRACKING
     return mOpenAshmemSize;
+#else
+    return 0; 
 }
 
 size_t Parcel::getOpenAshmemSize() const
 {
+#ifndef DISABLE_ASHMEM_TRACKING
     return mOpenAshmemSize;
+#else
+    return 0;
+#endif
 }
 
 // --- Parcel::Blob ---
diff -u -r frameworks/native/libs/binder/include/binder/Parcel.h native/libs/binder/include/binder/Parcel.h
--- frameworks/native/libs/binder/include/binder/Parcel.h	2020-02-03 11:09:30.229905000 +0900
+++ frameworks/native/libs/binder/include/binder/Parcel.h.new	2020-02-03 15:47:29.717905000 +0900
@@ -555,10 +555,10 @@
     public:
         inline void* data() { return mData; }
     };
-
+#ifndef DISABLE_ASHMEM_TRACKING
 private:
     size_t mOpenAshmemSize;
-
+#endif
 public:
     // TODO: Remove once ABI can be changed.
     size_t getBlobAshmemSize() const;
