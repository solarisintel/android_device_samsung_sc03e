--- frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java.orig	2019-12-20 08:15:58.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/RIL.java	2020-12-22 19:44:53.239089000 +0900
@@ -320,7 +320,6 @@
     AtomicBoolean mTestingEmergencyCall = new AtomicBoolean(false);
 
     final Integer mPhoneId;
-    private List<String> mOldRilFeatures;
 
     /* default work source which will blame phone process */
     protected WorkSource mRILDefaultWorkSource;
@@ -612,9 +611,6 @@
         mPhoneType = RILConstants.NO_PHONE;
         mPhoneId = instanceId;
 
-        final String oldRilFeatures = SystemProperties.get("ro.telephony.ril.config", "");
-        mOldRilFeatures = Arrays.asList(oldRilFeatures.split(","));
-
         ConnectivityManager cm = (ConnectivityManager)context.getSystemService(
                 Context.CONNECTIVITY_SERVICE);
         mIsMobileNetworkSupported = cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE);
@@ -5148,7 +5144,9 @@
                 false /* gsmFlag - don't care; will be changed by SST */);
     }
 
-    public boolean needsOldRilFeature(String feature) {
-        return mOldRilFeatures.contains(feature);
+    public static boolean needsOldRilFeature(String feature) {
+        List<String> oldRilFeatures = Arrays.asList(SystemProperties.get("ro.telephony.ril.config", "").split(","));
+
+        return oldRilFeatures.contains(feature);
     }
 }
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java.orig	2019-12-02 17:46:10.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java	2020-12-22 19:49:07.119089000 +0900
@@ -56,6 +56,10 @@
 import com.android.internal.telephony.uicc.IccFileHandler;
 import com.android.internal.telephony.uicc.IccRecords;
 import com.android.internal.telephony.uicc.IccUtils;
+import com.android.internal.telephony.RIL;
+
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
+
 import com.android.internal.os.BackgroundThread;
 
 import java.io.FileDescriptor;
@@ -81,6 +85,10 @@
     private static final int EVENT_REFRESH_EMBEDDED_SUBSCRIPTIONS = 9;
 
     private static final String ICCID_STRING_FOR_NO_SIM = "";
+
+    // Fake ICCID
+    private static final String FAKE_ICCID = "00000000000001";
+
     /**
      *  int[] sInsertSimState maintains all slots' SIM inserted status currently,
      *  it may contain 4 kinds of values:
@@ -533,21 +541,35 @@
             logd("SIM" + (slotId + 1) + " hot plug out");
         }
         mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+
+        if (!RIL.needsOldRilFeature("fakeiccid"))
+            mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+        else
+            mIccId[slotId] = FAKE_ICCID;
+
         if (isAllIccIdQueryDone()) {
             updateSubscriptionInfoByIccId();
         }
-        updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT);
+        if (!RIL.needsOldRilFeature("fakeiccid")) {
+            updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_ABSENT);
+        }
     }
 
     private void handleSimError(int slotId) {
         if (mIccId[slotId] != null && !mIccId[slotId].equals(ICCID_STRING_FOR_NO_SIM)) {
             logd("SIM" + (slotId + 1) + " Error ");
         }
-        mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+        if (!RIL.needsOldRilFeature("fakeiccid"))
+               mIccId[slotId] = ICCID_STRING_FOR_NO_SIM;
+        else
+               mIccId[slotId] = FAKE_ICCID;
+
         if (isAllIccIdQueryDone()) {
             updateSubscriptionInfoByIccId();
         }
-        updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
+        if (!RIL.needsOldRilFeature("fakeiccid")) {
+            updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR);
+        }
     }
 
     /**
@@ -622,7 +644,12 @@
                     // no SIM inserted last time, but there is one SIM inserted now
                     mInsertSimState[i] = SIM_CHANGED;
                 }
-                oldIccId[i] = ICCID_STRING_FOR_NO_SIM;
+
+                if (!RIL.needsOldRilFeature("fakeiccid"))
+                    oldIccId[i] = ICCID_STRING_FOR_NO_SIM;
+                else
+                    oldIccId[i] = FAKE_ICCID;
+
                 logd("updateSubscriptionInfoByIccId: No SIM in slot " + i + " last time");
             }
         }
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java.orig	2019-12-02 17:46:10.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/IccConstants.java	2020-12-22 19:44:53.355089000 +0900
@@ -106,4 +106,7 @@
 
     //UICC access
     static final String DF_ADF = "7FFF";
+
+    // Fake ICCID
+    static final String FAKE_ICCID = "00000000000001";
 }
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java.orig	2019-12-02 17:46:10.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/RuimRecords.java	2020-12-22 19:44:53.359089000 +0900
@@ -32,11 +32,14 @@
 import com.android.internal.telephony.CommandsInterface;
 import com.android.internal.telephony.GsmAlphabet;
 import com.android.internal.telephony.MccTable;
+import com.android.internal.telephony.RIL;
 import com.android.internal.telephony.SubscriptionController;
 import com.android.internal.telephony.cdma.sms.UserData;
 import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
 import com.android.internal.util.BitwiseInputStream;
 
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -648,7 +651,6 @@
                 if (ar.exception != null) {
                     break;
                 }
-
                 mMyMobileNumber = localTemp[0];
                 mMin2Min1 = localTemp[3];
                 mPrlVersion = localTemp[4];
@@ -663,12 +665,17 @@
                 ar = (AsyncResult)msg.obj;
                 data = (byte[])ar.result;
 
-                if (ar.exception != null) {
-                    break;
-                }
+                if (!RIL.needsOldRilFeature("fakeiccid")) {
+                    if (ar.exception != null) {
+                        break;
+                    }
 
-                mIccId = IccUtils.bcdToString(data, 0, data.length);
-                mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                    mIccId = IccUtils.bcdToString(data, 0, data.length);
+                    mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                } else {
+                    mIccId = FAKE_ICCID;
+                    mFullIccId = FAKE_ICCID;
+                }
 
                 log("iccid: " + SubscriptionInfo.givePrintableIccid(mFullIccId));
 
--- frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java.orig	2019-12-02 17:46:10.000000000 +0900
+++ frameworks/opt/telephony/src/java/com/android/internal/telephony/uicc/SIMRecords.java	2020-12-22 19:50:39.915089000 +0900
@@ -32,11 +32,14 @@
 
 import com.android.internal.telephony.CommandsInterface;
 import com.android.internal.telephony.MccTable;
+import com.android.internal.telephony.RIL;
 import com.android.internal.telephony.SmsConstants;
 import com.android.internal.telephony.gsm.SimTlv;
 import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState;
 import com.android.internal.telephony.uicc.IccCardApplicationStatus.AppType;
 
+import static com.android.internal.telephony.uicc.IccConstants.FAKE_ICCID;
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -903,12 +906,17 @@
                     ar = (AsyncResult) msg.obj;
                     data = (byte[]) ar.result;
 
-                    if (ar.exception != null) {
-                        break;
-                    }
+                    if (!RIL.needsOldRilFeature("fakeiccid")) {
+                        if (ar.exception != null) {
+                            break;
+                        }
 
-                    mIccId = IccUtils.bcdToString(data, 0, data.length);
-                    mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                        mIccId = IccUtils.bcdToString(data, 0, data.length);
+                        mFullIccId = IccUtils.bchToString(data, 0, data.length);
+                    } else {
+                        mIccId = FAKE_ICCID;
+                        mFullIccId = FAKE_ICCID;
+                    }
 
                     log("iccid: " + SubscriptionInfo.givePrintableIccid(mFullIccId));
                     break;
